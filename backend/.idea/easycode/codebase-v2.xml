<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/middleware/auth.js;C:/Users/User/RestoreLoans-Application/backend/models/Loan.js;C:/Users/User/RestoreLoans-Application/backend/models/Payment.js;C:/Users/User/RestoreLoans-Application/backend/models/User.js;C:/Users/User/RestoreLoans-Application/backend/routes/auth.js;C:/Users/User/RestoreLoans-Application/backend/routes/loans.js;C:/Users/User/RestoreLoans-Application/backend/routes/payments.js;C:/Users/User/RestoreLoans-Application/backend/server/server.js;C:/Users/User/RestoreLoans-Application/backend/package-lock.json;C:/Users/User/RestoreLoans-Application/backend/package.json" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/User/RestoreLoans-Application/backend&quot;:&quot;{\&quot;/middleware/auth.js\&quot;:\&quot;This file contains middleware and routes for a user authentication and bank account management system.\\n\\n`auth`: Middleware function that verifies the JWT token in the request header and attaches the user object to the request.\\n\\n`/profile`: Route that retrieves the user\\u0027s profile information, excluding the password.\\n\\n`/bank-accounts`: Route that handles the retrieval and addition of bank accounts for the authenticated user.\\n\\nThe file sets up the necessary routes and middleware for managing user authentication and bank account information in an Express.js application.\&quot;,\&quot;/models/Payment.js\&quot;:\&quot;This file defines a Mongoose schema for a `Payment` model, which represents a payment made by a user for a loan. The schema includes fields for the user ID, loan ID, payment amount, payment method, payment date, payment status, and transaction ID.\\n\\nThere are no classes or functions defined in this file. The file simply exports the `Payment` model, which can be used in other parts of the application to create, read, update, and delete payment records.\&quot;,\&quot;/server/server.js\&quot;:\&quot;This file is a server-side application built using the Express.js framework. It sets up a web server, configures middleware, and defines routes for handling various API endpoints related to authentication, user management, loans, and payments. The application also connects to a MongoDB database using the Mongoose library and makes HTTP requests to an external API using the Axios library.\\n\\n`dotenv.config()`: Loads environment variables from a `.env` file.\\n\\n`app.use(cors())`: Enables CORS (Cross-Origin Resource Sharing) for the Express.js application.\\n\\n`app.use(express.json())`: Parses incoming JSON data in the request body.\\n\\n`app.use(express.urlencoded({ extended: true }))`: Parses incoming URL-encoded data in the request body.\\n\\n`app.get(\\u0027/\\u0027)`: Handles the root URL route, making a GET request to an external API and returning the response data.\\n\\n`app.use(\\u0027/auth\\u0027, require(\\u0027./routes/auth\\u0027))`: Mounts the authentication-related routes defined in the `./routes/auth` module.\\n\\n`app.use(\\u0027/api/user\\u0027, require(\\u0027./routes/user\\u0027))`: Mounts the user-related routes defined in the `./routes/user` module.\\n\\n`app.use(\\u0027/api/loans\\u0027, require(\\u0027./routes/loans\\u0027))`: Mounts the loan-related routes defined in the `./routes/loans` module.\\n\\n`app.use(\\u0027/api/payments\\u0027, require(\\u0027./routes/payments\\u0027))`: Mounts the payment-related routes defined in the `./routes/payments` module.\\n\\n`app.listen(PORT, () \\u003d\\u003e { ... })`: Starts the Express.js server and listens for incoming requests on the specified port.\&quot;,\&quot;/models/Loan.js\&quot;:\&quot;This file defines a Mongoose schema for a loan document, which is used to store information about loans in a MongoDB database. The file does not contain any classes or functions, but rather defines the structure of the loan document using the Mongoose schema.\\n\\nThe `loanSchema` defines the following fields:\\n\\n`userId`: the ID of the user who applied for the loan, which is a reference to the `User` model.\\n`loanType`: the type of loan, which can be one of \\u0027Home\\u0027, \\u0027Personal\\u0027, \\u0027Auto\\u0027, or \\u0027Business\\u0027.\\n`amount`: the amount of the loan.\\n`term`: the term of the loan in months.\\n`interestRate`: the annual interest rate of the loan, with a default of 12%.\\n`totalAmount`: the total amount to be repaid, including interest.\\n`monthlyPayment`: the monthly payment amount.\\n`status`: the status of the loan, which can be \\u0027pending\\u0027, \\u0027approved\\u0027, \\u0027rejected\\u0027, \\u0027active\\u0027, or \\u0027completed\\u0027.\\n`balance`: the remaining balance of the loan.\\n`applicationDate`: the date the loan was applied for.\\n`approvalDate`: the date the loan was approved.\\n`documents`: an array of documents associated with the loan, including the name, filename, upload date, and any remarks.\\n\\nThe file exports the `Loan` model, which can be used to create, read, update, and delete loan documents in the MongoDB database.\&quot;,\&quot;/routes/loans.js\&quot;:\&quot;This file is an Express.js router that handles loan-related functionality. It includes the following functions:\\n\\n`router.get(\\u0027/\\u0027)`: Retrieves the loans for the authenticated user.\\n\\n`router.post(\\u0027/apply\\u0027)`: Allows the authenticated user to apply for a new loan, calculating the loan details and saving the loan to the database.\\n\\n`router.post(\\u0027/calculate\\u0027)`: Calculates the monthly payment and total amount for a given loan amount and term.\\n\\nThe file does not contain any classes. It exports the router, which can be used in the main Express.js application to handle loan-related requests.\&quot;,\&quot;/routes/payments.js\&quot;:\&quot;This file is a router for a payment-related API in an Express.js application. It handles two main functionalities:\\n\\n1. Making a payment for a loan:\\n   - `router.post(\\u0027/\\u0027, auth, async (req, res) \\u003d\\u003e { ... })`: This function creates a new payment record, updates the loan balance, and marks the loan as completed if the balance is zero.\\n\\n2. Retrieving the payment history for a user:\\n   - `router.get(\\u0027/\\u0027, auth, async (req, res) \\u003d\\u003e { ... })`: This function retrieves the payment history for the authenticated user and populates the loan information.\\n\\nThe file does not contain any classes, but it uses the following models:\\n\\n`Payment`: A model representing a payment record.\\n`Loan`: A model representing a loan.\\n\\nThe file also uses the `auth` middleware to authenticate the user before allowing access to the payment-related functionalities.\&quot;,\&quot;/package.json\&quot;:\&quot;This file appears to be a `package.json` file, which is a configuration file for a Node.js project. It does not contain any classes or functions, but rather lists the dependencies and development dependencies for the project, as well as the scripts that can be used to start the application.\\n\\nThe file describes a backend application for a \\\&quot;Restore Loans System\\\&quot; that uses the following dependencies:\\n\\n- `axios`: A library for making HTTP requests\\n- `bcryptjs`: A library for hashing passwords\\n- `cors`: A middleware that enables CORS with various options\\n- `dotenv`: A library for loading environment variables from a `.env` file\\n- `express`: A web application framework for Node.js\\n- `express-validator`: A set of express.js middlewares that wraps the validator.js library\\n- `jsonwebtoken`: A library for generating and verifying JSON Web Tokens\\n- `mongoose`: An Object Data Modeling (ODM) library for MongoDB and Node.js\\n- `multer`: A middleware for handling `multipart/form-data`\\n\\nThe project also includes a `nodemon` development dependency, which is a tool that automatically restarts the server when changes are made to the code.\&quot;,\&quot;/routes/auth.js\&quot;:\&quot;This file does not contain any classes. It contains the following functions:\\n\\n`router.post(\\u0027/register\\u0027, [...])`: This function handles the user registration process, including input validation, user creation, and JWT token generation.\\n\\n`router.post(\\u0027/login\\u0027, [...])`: This function handles the user login process, including input validation, user authentication, and JWT token generation.\\n\\nThis file is a part of an Express.js application that provides user authentication functionality, including registration and login. It uses the `express-validator` library for input validation and the `jsonwebtoken` library for generating and verifying JSON Web Tokens.\&quot;,\&quot;/package-lock.json\&quot;:\&quot;This file appears to be a package.json file, which is a configuration file for a Node.js project. It lists the dependencies and devDependencies required for the project, as well as some metadata about the project, such as the name, version, and description.\\n\\nThe file does not contain any classes or functions, but rather a list of dependencies and their versions. The main purpose of this file is to manage the dependencies and ensure that the project can be easily installed and run on different environments.\&quot;,\&quot;/models/User.js\&quot;:\&quot;This file defines a Mongoose schema for a user model and exports it as a Mongoose model.\\n\\n`userSchema`: A Mongoose schema that defines the structure of a user document, including fields for personal information, bank account details, and a timestamp for when the user was created.\\n\\n`userSchema.pre(\\u0027save\\u0027, async function(next))`: A pre-save middleware function that hashes the user\\u0027s password before saving it to the database.\\n\\n`userSchema.methods.comparePassword`: A method that compares a provided password with the hashed password stored in the user document.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/User/RestoreLoans-Application/backend&quot;:&quot;{\&quot;/middleware/auth.js\&quot;:{\&quot;file_path\&quot;:\&quot;/middleware/auth.js\&quot;,\&quot;file_name\&quot;:\&quot;auth.js\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;auth\&quot;,\&quot;method_parameters\&quot;:\&quot;(req, res, next)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;req\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;res\&quot;},{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;next\&quot;}],\&quot;return_type\&quot;:\&quot;\&quot;,\&quot;scope\&quot;:[[3,0],[22,2]],\&quot;indexes\&quot;:[81,684]}]},\&quot;/models/Loan.js\&quot;:{\&quot;file_path\&quot;:\&quot;/models/Loan.js\&quot;,\&quot;file_name\&quot;:\&quot;Loan.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/models/Payment.js\&quot;:{\&quot;file_path\&quot;:\&quot;/models/Payment.js\&quot;,\&quot;file_name\&quot;:\&quot;Payment.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/models/User.js\&quot;:{\&quot;file_path\&quot;:\&quot;/models/User.js\&quot;,\&quot;file_name\&quot;:\&quot;User.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/auth.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/auth.js\&quot;,\&quot;file_name\&quot;:\&quot;auth.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/loans.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/loans.js\&quot;,\&quot;file_name\&quot;:\&quot;loans.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/routes/payments.js\&quot;:{\&quot;file_path\&quot;:\&quot;/routes/payments.js\&quot;,\&quot;file_name\&quot;:\&quot;payments.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/server/server.js\&quot;:{\&quot;file_path\&quot;:\&quot;/server/server.js\&quot;,\&quot;file_name\&quot;:\&quot;server.js\&quot;,\&quot;methods\&quot;:[]},\&quot;/package-lock.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package-lock.json\&quot;,\&quot;file_name\&quot;:\&quot;package-lock.json\&quot;,\&quot;methods\&quot;:[]},\&quot;/package.json\&quot;:{\&quot;file_path\&quot;:\&quot;/package.json\&quot;,\&quot;file_name\&quot;:\&quot;package.json\&quot;,\&quot;methods\&quot;:[]}}&quot;}" />
  </component>
</project>